{"name":"Play Geolocation Module","tagline":"This is a play module for IP based geolocation","body":"# play-geolocation-module\r\n\r\nThis is a play module for IP based geolocation.\r\n\r\nCurrently, the module supports use of one of the following service to retrieve the IP data:\r\n* [Freegeoip](http://freegeoip.net/) - Free web service for retrieve IP data\r\n* [Maxind GeoIP Country Web Service](https://www.maxmind.com/en/country) - Web service that retrieve the country of the given IP, with reliability of 99.98%\r\n\r\n## Configuring\r\n\r\nThe first step is include the geolocation in your dependencies list, in `Build.scala` file:\r\n\r\n```scala\r\nimport sbt._\r\nimport Keys._\r\nimport play.Project._\r\n\r\nobject ApplicationBuild extends Build {\r\n\r\n  val appName         = \"geolocation-sample\"\r\n  val appVersion      = \"1.0-SNAPSHOT\"\r\n\r\n  val appDependencies = Seq(\r\n    // Add your project dependencies here,\r\n    javaCore,\r\n    javaJdbc,\r\n    javaEbean,\r\n    \"com.edulify\" % \"geolocation_2.10\" % \"1.1.3\"\r\n  )\r\n\r\n  val main = play.Project(appName, appVersion, appDependencies).settings(\r\n    // Add your own project settings here\r\n    resolvers += Resolver.url(\"Edulify Repository\", url(\"http://edulify.github.com/modules/releases/\"))(Resolver.ivyStylePatterns)\r\n  )\r\n\r\n}\r\n\r\n```\r\n\r\nDon't forget to add the resolver to your list of resolvers, or it won't work!\r\n\r\n### Configurations\r\n\r\nIn order to set the cache configurations, you must use the `application.conf` file, using the following keys:\r\n\r\n```\r\ngeolocation {\r\n  useCache  = true                             # use cache (true | false)\r\n  cacheTTL  = 3600                             # time in seconds that cache will be kept\r\n  source    = FREEGEOIP                        # the web service that should be used for\r\n                                               # your IP queries (FREEGEOIP | GEOIP_COUNTRY)\r\n  # maxmind_license = yourMaxmindLicenseCode   # used only when the source is GEOIP_COUNTRY\r\n}\r\n```\r\n\r\nYou can also set the key `geolocation.debug` with a boolean value (true | false) in order to enable / disable the debug of requests. This debug will use the method `play.Logger.debug` to show in the *Play terminal* the requests made to the service and their responses.\r\n\r\n### Caching\r\n\r\nThis module saves a cache of the data for the requested IPs. The default cache time to live is 3600 seconds (1 hour), but this time can be setted through the `conf` file, as shown above.\r\n\r\nAlso, you can set cache off, also through the `conf` file. **Warning**: by setting off the cache, you can overload your system (and the service) due to multiple requests. Also, if you are using the Maxmind GeoIP service, cache off can waste your request quota. Without cache activated, every call to `GeolocationService.getGeolocate` will necessarily make a request to the choosen web service.\r\n\r\n\r\n## Using\r\n\r\nTo use this module, its enough to import it in your class and use the static method `GeolocationService.getGeolocation`. This call will return an object of the class `Geolocation`, and can throw the following Exceptions:\r\n* `InvalidAddressException` - when the argument address is not valid.\r\n* `ServiceErrorException` - when the Web service response is not recognized.\r\n\r\nThe `Geolocation` class has the following methods:\r\n\r\n##### *String* getIp()\r\nReturns the ip returned by the web service.\r\n\r\n##### *String* getCountryCode()\r\nReturns the country code (with two letters) returned by the web service.\r\n\r\n##### *String* getCountryName()\r\nReturns the country name returned by the web service.\r\n\r\n##### *String* getRegionCode()\r\nReturns the region code returned by the web service.\r\n\r\n##### *String* getRegionName()\r\nReturns the region name returned by the web service.\r\n\r\n##### *String* getCity()\r\nReturns the city returned by the web service.\r\n\r\n##### *double* getLatitude()\r\nReturns the latitude returned by the web service.\r\n\r\n##### *double* getLongitude()\r\nReturns the longitude returned by the web service.\r\n\r\n----\r\n\r\nNote that all methods but `getIp()` and `getCountryCode()` will return `null` or `0` value when the source is *GEOIP_COUNTRY*.\r\n\r\nExample code:\r\n\r\n```java\r\nimport com.edulify.modules.geolocation.Geolocation;\r\nimport com.edulify.modules.geolocation.GeolocationService;\r\nimport com.edulify.modules.geolocation.InvalidAddressException;\r\n\r\npublic class Application {\r\n  public static Result index() {\r\n    ...\r\n    try {\r\n      Geolocation geolocation = GeolocationService.getGeolocation(request.remoteAddress());\r\n      if (geolocation == null) { // the service does not responded properly\r\n        return null;\r\n      }\r\n      if (\"US\".equals(geolocation.getCountryCode())) {\r\n        ...\r\n      }\r\n    } catch (InvalidAddressException ex) {\r\n      ...\r\n    }\r\n    ...\r\n  }\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}